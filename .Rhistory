Kanli.brACA.kwet <- FT.core(Model.BRT = BRT.brACA.kwet,
MCore = GDGT.Kan.conv, MAge = GDGT.Kan$Age, GDGT = T,
LakeName = "Kanli", Only.fit = T, Save.RDS = T, Displot = F,
Save.path = "Results/Kanli.csv")
#### Import + settings ####
Cluster.prediction.ACADB.brGDGT <- readRDS("Results/Cluster.prediction.ACADB.brGDGT.Rds")
Kanli.brACA       <- readRDS("Results/Kanli_brACA.Rds")[[2]]
Kanli.brACA.karid <- readRDS("Results/Kanli_karid.Rds")[[2]]
Kanli.brACA.kwet  <- readRDS("Results/Kanli_kwet.Rds")[[2]]
NRX.brACA         <- readRDS("Results/NRX_brACA.Rds")[[2]]
NRX.brACA.karid   <- readRDS("Results/NRX_karid.Rds")[[2]]
NRX.brACA.kwet    <- readRDS("Results/NRX_kwet.Rds")[[2]]
XRD.brACA         <- readRDS("Results/XRD_brACA.Rds")[[2]]
XRD.brACA.karid   <- readRDS("Results/XRD_karid.Rds")[[2]]
XRD.brACA.kwet    <- readRDS("Results/XRD_kwet.Rds")[[2]]
#### MAAT plot ####
pBRT.Kanli <- Combine.ML.cluster(
List.models = list(M1 = Kanli.brACA, M2 = Kanli.brACA.karid, M3 = Kanli.brACA.kwet),
Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
Cluster.prediction = Cluster.prediction.ACADB.brGDGT,
GDGT.paleo = GDGT.Kan,
Surf.val = Actual.val$MAAT[row.names(Actual.val) == "Vanevan"],
Compare.curve = c("MAAT_mr_DJ", "MAAT_soil_Naaf", "MAAT_LSun"), Core.name = "(B) Vanevan (Armenia)",
Plot.y = "Age", Plot.y.lab = NULL, Param.clim = "MAAT", Cluster.prob = "K-warm/arid",
Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T,
Save.path = "Results/Kanli_brACA_combined.Rds",
H = 1100, W = 450, Save.plot ="Figures/Test_BRT_Kan.pdf")
#### MAAT plot ####
pBRT.Kanli <- Combine.ML.cluster(
List.models = list(M1 = Kanli.brACA, M2 = Kanli.brACA.karid, M3 = Kanli.brACA.kwet),
Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
Cluster.prediction = Cluster.prediction.ACADB.brGDGT,
GDGT.paleo = GDGT.Kan,
Surf.val = Actual.val$MAAT[row.names(Actual.val) == "Vanevan"],
Compare.curve = c("MAAT_mr_DJ", "MAAT_soil_Naaf", "MAAT_LSun"), Core.name = "(B) Vanevan (Armenia)",
Plot.y = "Age", Plot.y.lab = NULL, Param.clim = "MAAT", Cluster.prob = "K-warm/arid",
Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T,
Save.path = "Results/Kanli_brACA_combined.Rds")
pBRT.NRX <- Combine.ML.cluster(
List.models = list(M1 = NRX.brACA, M2 = NRX.brACA.karid, M3 = NRX.brACA.kwet),
Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
Cluster.prediction = Cluster.prediction.ACADB.brGDGT,
GDGT.paleo = GDGT.NRX, Time.lim = c(0, 7200), Cluster.prob = "K-warm/arid",
Surf.val = Cores.metadata$MAAT[row.names(Cores.metadata) == "NRX"],
Compare.curve = c("MAAT_mr_DJ", "MAAT_DJ_5Me", "MAAT_NMSDB_mr5"), Core.name = "(A) NRX (Altai)",
Plot.y = "Age",  Plot.y.lab = NULL, Param.clim = "MAAT",
Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T,
Save.path = "Resultats/China/GDGT/Cores/NRX/Func_trans/NRX_brACA_combined.Rds"
)
pBRT.NRX <- Combine.ML.cluster(
List.models = list(M1 = NRX.brACA, M2 = NRX.brACA.karid, M3 = NRX.brACA.kwet),
Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
Cluster.prediction = Cluster.prediction.ACADB.brGDGT,
GDGT.paleo = GDGT.NRX, Time.lim = c(0, 7200), Cluster.prob = "K-warm/arid",
Surf.val = Cores.metadata$MAAT[row.names(Cores.metadata) == "NRX"],
Compare.curve = c("MAAT_mr_DJ", "MAAT_DJ_5Me", "MAAT_NMSDB_mr5"), Core.name = "(A) NRX (Altai)",
Plot.y = "Age",  Plot.y.lab = NULL, Param.clim = "MAAT",
Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T,
Save.path = "Results/NRX_brACA_combined.Rds"
)
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
rm(list = ls())
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
Meco
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/Import/Script/BRT_script.R")
Mclim.bio <- cbind(Mclim, Meco)
BioCl.pca.ACA.gdgt <- PCA.bioclim(Mclim.bio[c(1:9,44,68)], transp_OK = T, Scale.PCA = 4, #58
Cluster.core = "Aridity", Shape = 21, Legend.size = 7, Dot.size = 4,
# Groupes = list(Water = c("AI", "MAP", "MPWAQ", "MPCOQ"),
# Temperature = c("MAAT", "MTWAQ", "MTCOQ"), Altitude = "Altitude"),
# Site.name = "Bioclim CHELSA+CGAR for ACA (res: 0.5°)",
Site.name = "", Num.facet = "", return.pick = F, Legend.position = "none",
Save.plot = "Figures/PCA_bioclim_ACADB_arid.pdf", H = 370, W = 370)
help(new_scale_color())
help(new_scale_color
)
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
BioCl.pca.ACA.gdgt <- PCA.bioclim(Mclim.bio[c(1:9,44,68)], transp_OK = T, Scale.PCA = 4, #58
Cluster.core = "Aridity", Shape = 21, Legend.size = 7, Dot.size = 4,
# Groupes = list(Water = c("AI", "MAP", "MPWAQ", "MPCOQ"),
# Temperature = c("MAAT", "MTWAQ", "MTCOQ"), Altitude = "Altitude"),
# Site.name = "Bioclim CHELSA+CGAR for ACA (res: 0.5°)",
Site.name = "", Num.facet = "", return.pick = F, Legend.position = "none",
Save.plot = "Figures/PCA_bioclim_ACADB_arid.pdf", H = 370, W = 370)
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
Mclim.bio[c(1:9,44,68)]
PCA.ACA   <- data.frame(read.csv(file="Results/PCA_ACA_bioclim_PCA_site.csv",sep=",",dec=".",header=T,row.names=1))        # GDGT indexe Ayrag
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
Mclim.bio
BioCl.pca.ACA.gdgt
BioCl.pca.ACA.gdgt <- PCA.bioclim(Mclim.bio[c(1:9,44,68)], transp_OK = T, Scale.PCA = 4,
Cluster.core = "Aridity", Shape = 21, Legend.size = 7, Dot.size = 4,
Site.name = "", Num.facet = "", return.pick = T, Legend.position = "none",
Save.plot = "Figures/PCA_bioclim_ACADB_arid.pdf", H = 370, W = 370)
BioCl.pca.ACA.gdgt
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
shrtcts:::shortcut_01()
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
PCoI.Uz <- PCoI.vegetation(MV = data.frame(t(M.br.GDGT.soil)), MP = data.frame(t(M.br.GDGT.lac)),
Show.errors = F, Show.outliers = F, Show.site.lab = T, PCoI.Only.vectors = T,
PCA.display = F, Helinger.trans = T, Scale.PCA = 3, GDGT = T, Return.plot = T,
# Symbol.pos = c(.9,.9,.15),
Stats.pos = c(0.02,0.6), Text.size = 3.5,
# Symbol.path = "Figures/ACA/Trait/Workflow/Symboles/xml/Symbole_pollen_vs_veget.xml",
# W = 400, H = 400, Save.plot = "Figures/ACA/GDGT/Surface/PCA/Procrustes_errors_GDGT.pdf"
)
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
#### PCA soil ####
PCA.soil <- PCA.bioclim(M1[c(grep("^f.", names(M1)), 48)], Dot.opac = 0.7, Dot.size = 3, Cluster.core = "Aridity2",
Ellipse = F, Cluster.core.lab = "",  Legend.size = 11, GDGT = T, Helinger.trans = T,
Density.contour = F, Opa.range = c(0.1,.4), Density.type = "polygon",
transp_OK = F, Scale.PCA = 6, return.pick = T, Num.facet = "(A)", Show.annot = T, Show.site.lab = F,
Site.name = "PCA brGDGT (soil)", Legend.position = "none", Show.centroid = F, Marg.density.plot = T,
# Symbol.path = "Figures/ACA/Trait/Workflow/Symboles/xml/Symbole_GDGT.xml", Symbol.pos = Symbol.pos.UZ,
# Save.plot = "Figures/ACA/GDGT/Surface/PCA/PCA_brGDGT_ACA_soil.pdf", H = 650, W = 650
)
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
M1
M1[c(grep("^f.", names(M1)), 48)]
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
names(M1)
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
VIF.full.soil <- RDA.pollen.surf(data.frame(t(M.br.GDGT.soil[intersect(row.names(M.br.GDGT.soil), row.names(Meco.RDA)),]), check.names = F), MClim = Meco3[intersect(row.names(Meco3), row.names(Meco)),],
Choose.clim = c("MAAT", "MAF", "AI", "Salinity", "pH", "MPWAQ", "Altitude", "MPCOQ", "MTCOQ", "MTWAQ", "MAP"), Display.plot = F,
Remove.7Me = T, Csv.sep =",", transp_OK = T, Helinger.trans = T, VIF = T, Display.VIF = F, return.VIF = T)
VIF.full.soil <- RDA.pollen.surf(data.frame(t(M.br.GDGT.soil[intersect(row.names(M.br.GDGT.soil), row.names(Meco.RDA)),]), check.names = F), MClim = Meco3[intersect(row.names(Meco3), row.names(Meco)),],
Choose.clim = c("MAAT", "MAF", "AI", "Salinity", "pH", "MPWAQ", "Altitude", "MPCOQ", "MTCOQ", "MTWAQ", "MAP"), Display.plot = F,
Remove.7Me = T, Csv.sep =",", transp_OK = T, Helinger.trans = T, VIF = T, Display.VIF = F, return.VIF = T)
RDA.soil <- RDA.pollen.surf(data.frame(t(M.br.GDGT.soil[intersect(row.names(M.br.GDGT.soil), row.names(Meco.RDA.soil)),]), check.names = F), MClim = Meco3[intersect(row.names(Meco3), row.names(Meco)),],
Choose.clim = c("MAAT", "MAF", "AI", "Salinity", "pH", "MPWAQ"),
Cluster.path = Meco.RDA.soil, Sort.shape = c("Soil", "Lacustrine"),
# Cluster.path = Meco.RDA, Sort.shape = c("Lacustrine"),
Cluster.groups = Cluster.groups, Shape.groups = Myshapes, ggplot.display = T, Marg.density.plot = T,
Display.legends = F, Remove.7Me = T, Simple.title = T, Show.text = F,
Csv.sep =",", transp_OK = T, Helinger.trans = T, Scale.sites = 2, Scale.taxa = 2,
# Manu.lim = c(-0.65,0.85,-0.65,0.85),
# Manu.lim = c(-.9,.9,-.9,.9),
Manu.lim = c(-1.05,1.05,-1.05,1.05),
Dot.size = 3, Alpha.dot = .7, Vector.env.scale = 0.9, Vector.scale = 1.5,
Annot = "(D)",  Sort.eco = Ordin.aridity2, VIF = T, return.VIF = F, Display.VIF = F,  return.pick = T,
Color.choice = c("#8c510a", "#bf812e", "#dfc27e", "#f5e9bf","#80cec1"),
Save.path = "Resultats/ACA/GDGT/Surface/PCA/MGDGT_mong.csv",
Type.samples = "brGDGT (soil)", GDGT = T)
shrtcts:::shortcut_01()
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
rm(list = ls())
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
MArid
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
Meco
names(MArid)
#### Plots ####
P1 <- ggplot(MArid, aes(y = MBTp5Me, color = Sample.type, shape = Sample.type, x = pH))+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = MBTp5Me, x = pH, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = R.size, vstep = V.step, label.y = "bottom")+ylim(c(0,1)) + ggtitle(expression(paste(MBT,"'"[5~Me])))+ annotate("text", x = min(Msurf.mean.WDB$pH, na.rm = T), y = Annot.x, label = "(A)", hjust = 0, size = 5)
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
#### Figure 7 (pH, CBT, IR) ####
Compa.pH = T
if(Compa.pH == T){
#### Plots ####
P1 <- ggplot(MArid, aes(y = CBTp, color = Sample.type, shape = Sample.type, x = pH))+
geom_vline(xintercept = 7, lty = "dashed")+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = CBTp, x = pH, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = 3, vstep = 0.07, label.y = "bottom", label.x = "left") + annotate("text", x = Inf, y = Inf, label = "(A)", hjust = 1.1, vjust = 1.3, size = 5) + ylab("CBT'")
P2 <- ggplot(MArid, aes(y = CBT5Me, color = Sample.type, shape = Sample.type, x = pH))+
geom_vline(xintercept = 7, lty = "dashed")+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = CBT5Me, x = pH, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+ ylim(c(-2,3))+
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = 3, vstep = 0.07, label.y = "bottom") + annotate("text", x = Inf, y = Inf, label = "(B)", hjust = 1.1, vjust = 1.3, size = 5)+ylab(expression(paste(CBT,"'"[5~Me])))
P3 <- ggplot(MArid, aes(y = IR6Me, color = Sample.type, shape = Sample.type, x = pH))+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = IR6Me, x = pH, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = 3, vstep = 0.07, label.y = "top")+ylim(c(0,1))+ annotate("text", x = Inf, y = Inf, label = "(C)", hjust = 1.1, vjust = 1.3, size = 5)+ylab(expression(IR[6~Me]))
P4 <- ggplot(MArid, aes(y = IRp6_7Me, color = Sample.type, shape = Sample.type, x = pH))+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = IRp6_7Me, x = pH, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = 3, vstep = 0.07, label.y = "top")+ylim(c(0,1))+ annotate("text", x = Inf, y = Inf, label = "(D)", hjust = 1.1, vjust = 1.3, size = 5)+ylab(expression(paste(IR, "'"[6+7~Me])))
P5 <- ggplot(MArid, aes(y = CBTp, color = Sample.type, shape = Sample.type, x = AI)) +
Log10.scale+ annotation_logticks(sides = 'b')+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = CBTp, x = AI, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = 3, vstep = 0.07, label.y = "top",  label.x = "left")+ylim(c(-2,3))+ annotate("text", x = Inf, y = Inf, label = "(E)", hjust = 1.1, vjust = 1.3, size = 5)+ ylab("CBT'")
P6 <- ggplot(MArid, aes(y = CBTp, color = Sample.type, shape = Sample.type, x = Salinity)) +
Log10.scale+ annotation_logticks(sides = 'b')+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = CBTp, x = Salinity, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = 3, vstep = 0.07, label.y = "top")+ylim(c(-2,3))+ annotate("text", x = Inf, y = Inf, label = "(F)", hjust = 1.1, vjust = 1.3, size = 5)+ ylab("CBT'")
P7 <- ggplot(MArid, aes(y = CBTp, color = Sample.type, shape = Sample.type, x = IR6Me)) +
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = CBTp, x = IR6Me, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7)+ stat_poly_eq(size = 3, vstep = 0.07,  label.y = "bottom", label.x = "left")+ylim(c(-2,3))+ annotate("text", x = Inf, y = Inf, label = "(G)", hjust = 1.1, vjust = 1.3, size = 5) +xlab(expression(IR[6~Me]))+ ylab("CBT'")
P8 <- ggplot(MArid, aes(y = CBTp, color = Sample.type, shape = Sample.type, x = IRp6_7Me)) +
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = CBTp, x = IRp6_7Me, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7)+ stat_poly_eq(size = 3, vstep = 0.07, label.y = "bottom")+ylim(c(-2,3))+ annotate("text", x = Inf, y = Inf, label = "(H)", hjust = 1.1, vjust = 1.3, size = 5) +xlab(expression(paste(IR, "'"[6+7~Me]))) + ylab("CBT'")
#### Scales ####
PFULL <- (P1 | P2 | P3 | P4) / (P5 | P6 | P7 | P8) + plot_layout(guides = "collect") & theme_bw() &
theme(legend.position = "bottom", panel.grid = element_blank(),
title = element_text(size = 13)) & AI.class.scale & Shape.scale &
guides(color = guide_legend(nrow = 1, override.aes = list(size = 3)), shape = guide_legend(nrow = 1, override.aes = list(size = 3)))
#### Export ####
H = 690*.8; W = 1300*.8; Save.plot ="Figures/Fig_7.pdf"
ggsave(filename = Save.plot, PFULL, width = W*0.026458333, height = H*0.026458333, units = "cm")
}
#### Figure 8 (Salinity) ####
Compa.Wang = T
if(Compa.Wang == T){
#### Plots ####
P1 <- ggplot(MArid, aes(y = IR6Me, color = Sample.type, shape = Sample.type, x = Salinity))+
Log10.scale+ annotation_logticks(sides = 'b')+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = IR6Me, x = Salinity, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+ xlab(expression(paste(Salinity~(mg.L^-1))))+
# geom_point(inherit.aes = F, data = Msurf.mean.WDB, aes(y = IR6Me, x = Salinity), color = "grey90", size = 2) +
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = 3, vstep = 0.07, label.y = "bottom", label.x = "right")+ylim(c(0,1))+ annotate("text", x = max(Msurf.mean.WDB$Salinity, na.rm = T), y = Annot.x, label = "(A)", hjust = 1, size = 5)+ylab(expression(IR[6~Me]))
P2 <- ggplot(MArid, aes(y = IR7Me, color = Sample.type, shape = Sample.type, x = Salinity))+
Log10.scale+ annotation_logticks(sides = 'b')+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = IR7Me, x = Salinity, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+ xlab(expression(paste(Salinity~(mg.L^-1))))+
# geom_point(inherit.aes = F, data = Msurf.mean.WDB, aes(y = IR7Me, x = Salinity), color = "grey90", size = 2) +
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = 3, vstep = 0.07)+ylim(c(0,1))+ annotate("text", x = max(Msurf.mean.WDB$Salinity, na.rm = T), y = Annot.x, label = "(B)", hjust = 1, size = 5)+ylab(expression(IR[7~Me]))
P3 <- ggplot(MArid, aes(y = IR6_7Me, color = Sample.type, shape = Sample.type, x = Salinity))+
Log10.scale+ annotation_logticks(sides = 'b')+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = IR6_7Me, x = Salinity, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+ xlab(expression(paste(Salinity~(mg.L^-1))))+
# geom_point(inherit.aes = F, data = Msurf.mean.WDB, aes(y = IR6_7Me, x = Salinity), color = "grey90", size = 2) +
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = 3, vstep = 0.07, label.y = "top")+ylim(c(0,1))+ annotate("text", x = max(Msurf.mean.WDB$Salinity, na.rm = T), y = Annot.x, label = "(C)", hjust = 1, size = 5)+ylab(expression(IR[6+7~Me]))
P4 <- ggplot(MArid, aes(y = IRp6_7Me, color = Sample.type, shape = Sample.type, x = Salinity))+
Log10.scale+ annotation_logticks(sides = 'b')+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = IRp6_7Me, x = Salinity, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+ xlab(expression(paste(Salinity~(mg.L^-1))))+
# geom_point(inherit.aes = F, data = Msurf.mean.WDB, aes(y = IRp6_7Me, x = Salinity), color = "grey90", size = 2) +
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = 3, vstep = 0.07, label.y = "top")+ylim(c(0,1))+ annotate("text", x = max(Msurf.mean.WDB$Salinity, na.rm = T), y = Annot.x, label = "(D)", hjust = 1, size = 5)+ylab(expression(paste(IR, "'"[6+7~Me])))
P5 <- ggplot(MArid, aes(y = IR6_7Me, color = Sample.type, shape = Sample.type, x = AI)) +
Log10.scale+ annotation_logticks(sides = 'b')+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = IR6_7Me, x = AI, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+
# geom_point(inherit.aes = F, data = Msurf.mean.WDB, aes(y = IR6_7Me, x = AI), color = "grey90", size = 2) +
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = 3, vstep = 0.07, label.y = "top")+ylim(c(0,1))+ annotate("text", x = max(Msurf.mean.WDB$AI, na.rm = T), y = Annot.x, label = "(E)", hjust = 1, size = 5)+ylab(expression(IR[6+7~Me]))
P6 <- ggplot(MArid, aes(y = IRp6_7Me, color = Sample.type, shape = Sample.type, x = AI)) +
Log10.scale+ annotation_logticks(sides = 'b')+
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = IRp6_7Me, x = AI, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+
# geom_point(inherit.aes = F, data = Msurf.mean.WDB, aes(y = IRp6_7Me, x = AI), color = "grey90", size = 2) +
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7) + stat_poly_eq(size = 3, vstep = 0.07, label.y = "top")+ylim(c(0,1))+ annotate("text", x = max(Msurf.mean.WDB$AI, na.rm = T), y = Annot.x, label = "(F)", hjust = 1, size = 5)+ylab(expression(paste(IR, "'"[6+7~Me])))
P7 <- ggplot(MArid, aes(y = MBTp5Me, color = Sample.type, shape = Sample.type, x = IRp6_7Me)) +
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = MBTp5Me, x = IRp6_7Me, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+
# geom_point(inherit.aes = F, data = Msurf.mean.WDB, aes(y = MBTp5Me, x = IRp6_7Me), color = "grey90", size = 2) +
# geom_point(inherit.aes = F, data = Msurf.mean.ACADB, aes(y = MBTp5Me, x = IRp6_7Me), color = "grey50", shape = 4, size = 0.5) +
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7)+ stat_poly_eq(size = 3, vstep = 0.07,  label.y = "bottom", label.x = "right")+ylim(c(0,1))+ annotate("text", x = max(MArid$IRp6_7Me, na.rm = T), y = Annot.x, label = "(G)", hjust = 1, size = 5)+xlab(expression(paste(IR, "'"[6+7~Me])))+ ylab(expression(paste(MBT,"'"[5~Me])))
P8 <- ggplot(MArid, aes(y = MBTp6Me, color = Sample.type, shape = Sample.type, x = IRp6_7Me)) +
geom_hex(data = Msurf.mean.WDB, mapping = aes(y = MBTp6Me, x = IRp6_7Me, fill = ..count..), bins = Bin.size, color = NA)+ Fill.scale+
# geom_point(inherit.aes = F, data = Msurf.mean.WDB, aes(y = MBTp6Me, x = IRp6_7Me), color = "grey90", size = 2) +
# geom_point(inherit.aes = F, data = Msurf.mean.ACADB, aes(y = MBTp6Me, x = IRp6_7Me), color = "grey50", shape = 4, size = 0.5) +
geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7)+ stat_poly_eq(size = 3, vstep = 0.07, label.y = "bottom")+ylim(c(0,1))+ annotate("text", x = max(MArid$IRp6_7Me, na.rm = T), y = Annot.x, label = "(H)", hjust = 1, size = 5)+xlab(expression(paste(IR, "'"[6+7~Me])))+ ylab(expression(paste(MBT,"'"[6~Me])))
# P9 <- ggplot(MArid, aes(y = IR6Me, color = Acidity, shape = Acidity, x = pH))+geom_point(aes(color = Aridity)) + geom_smooth(method = "lm", se = F, linewidth = 0.7)+ stat_poly_eq(size = 3, vstep = 0.07, label.y = "bottom")#+ylim(c(0,1))+ annotate("text", x = 0.62, y = 0.98, label = "(H)", hjust = 0, size = 5)+xlab(expression(paste(IR, "'"[6+7~Me])))+ ylab(expression(paste(MBT,"'"[6~Me])))
#### Scales ####
PFULL <- (P1 | P2 | P3 | P4) / (P5 | P6 | P7 | P8) + plot_layout(guides = "collect") & theme_bw() &
theme(legend.position = "bottom", panel.grid = element_blank(),
title = element_text(size = 13)) & AI.class.scale & Shape.scale &
guides(color = guide_legend(nrow = 1, override.aes = list(size = 3)), shape = guide_legend(nrow = 1, override.aes = list(size = 3)))
#### Export ####
H = 690*.8; W = 1300*.8; Save.plot ="Figures/Fig_8.pdf"
ggsave(filename = Save.plot, PFULL, width = W*0.026458333, height = H*0.026458333, units = "cm")
}
#### Table 3 (ANOVA, MANOVA) ####
Stats.var = T
if(Stats.var == T){
#### P-values as stars ####
p_value_to_stars <- function(p) {
ifelse(p <= 0.001, "***",
ifelse(p <= 0.01, "** ",
ifelse(p <= 0.05, "*  ",
ifelse(p <= 0.1, "   ", "   "))))}
p_value_to_test <- function(p) {
ifelse(p <= 0.001, "**",
ifelse(p <= 0.01, "*", ""))}
#### Cleaning data and test ####
MArid.mano <- MArid
Nb.evironmt <- 4
MArid.mano <- MArid[complete.cases(MArid[c("Salinity", "pH")]),]
print(paste("Database size for MANOVA:", nrow(MArid.mano)))
List.indices <- c("MBTp5Me", "MBTp6Me", "IR6Me", "IR6_7Me", "IRp6_7Me", "CBTp", "CBT5Me")
List.FA <- c("f.IIIa_5Me", "f.IIIa_6Me", "f.IIIb_5Me", "f.IIIb_6Me", "f.IIIc_5Me", "f.IIIc_6Me", "f.IIa_5Me", "f.IIa_6Me", "f.IIb_5Me", "f.IIb_6Me", "f.IIc_5Me", "f.IIc_6Me", "f.Ia", "f.Ib", "f.Ic")
List.param <- c("\\textbf{F-statistics}", "f(IIIa)", "f(IIIa')", "f(IIIb)", "f(IIIb')", "f(IIIc)", "f(IIIc')", "f(IIa)", "f(IIa')", "f(IIb)", "f(IIb')", "f(IIc)", "f(IIc')", "f(Ia)", "f(Ib)", "f(Ic)", "\\textbf{F-statistics}", "$\\mathrm{MBT'_{5Me}}$", "$\\mathrm{MBT'_{6Me}}$", "$\\mathrm{IR_{6Me}}$", "$\\mathrm{IR_{6+7Me}}$", "$\\mathrm{IR'_{6+7Me}}$", "CBT'", "$\\mathrm{CBT'_{5Me}}$")
Group.names <- c("Model", "Compound", "\\textbf{Alkalinity}", "\\textbf{Aridity}", "\\textbf{Salinity}", "\\textbf{Sample type}")
#### 1. Assumption of Multivariate Normality (using Mardia's test) ####
library(MVN)
result <- mvn(data = MArid.mano[, List.indices], mvnTest = "mardia")
result <- mvn(data = MArid.mano[, List.FA], mvnTest = "mardia")
#### 2. Assumption of Homogeneity of Variance-Covariance (Equality of Covariance Matrices) using Levene test ####
library(car)
apply_levene_test <- function(df, group_var) {
df[[group_var]] <- as.factor(df[[group_var]])
results <- lapply(df[, sapply(df, is.numeric)], function(x) {
levene_result <- leveneTest(x ~ df[[group_var]], data = df)
return(levene_result$`Pr(>F)`[1])  # Extract p-value
})
result_df <- data.frame(
Variable = names(results),
P_Value = unlist(results)
)
return(result_df)
}
levene_results1 <- cbind(Acidity  = apply_levene_test(MArid.mano[, c(List.FA, "Acidity")], "Acidity")[,1:2],
Aridity = apply_levene_test(MArid.mano[, c(List.FA, "Aridity")], "Aridity")[,2],
Salinity_classe = apply_levene_test(MArid.mano[, c(List.FA, "Salinity_classe")], "Salinity_classe")[,2],
Sample.type = apply_levene_test(MArid.mano[, c(List.FA, "Sample.type")], "Sample.type")[,2]
)
levene_results2 <- cbind(Acidity  = apply_levene_test(MArid.mano[, c(List.indices, "Acidity")], "Acidity")[,1:2],
Aridity = apply_levene_test(MArid.mano[, c(List.indices, "Aridity")], "Aridity")[,2],
Salinity_classe = apply_levene_test(MArid.mano[, c(List.indices, "Salinity_classe")], "Salinity_classe")[,2],
Sample.type = apply_levene_test(MArid.mano[, c(List.indices, "Sample.type")], "Sample.type")[,2]
)
levene_pval1 <- sapply(levene_results1, p_value_to_test)
levene_pval2 <- sapply(levene_results2, p_value_to_test)
levene_pval1 <- rbind(levene_pval1, levene_pval2)
row.names(levene_pval1) <- List.param[-c(1,17)]
levene_pval1 <- data.frame(levene_pval1[,-c(1)])
names(levene_pval1) <- Group.names[3:length(Group.names)]
Save.path.tex <- "Table/Table_S5"; library(xtable)
LateX.caption <- "Levene's test results for the two MANOVA models used to evaluate the grouping factors effect accross brGFGT FA and indices. The violation of the assumption of homogeneity of variance-covariance is marked by ** (p-values < 0.001) or * (p-values < 0.01)"
Tlatex <- xtable(levene_pval1, caption = LateX.caption, type = "latex", label = "SI_Table_Lavene")
print(Tlatex, file = Save.path.tex, booktabs = T, include.rownames = T, comment = F,
caption.placement = "top", sanitize.text.function = function(x){x},
hline.after = c(-1,0,15,nrow(levene_pval1)))
#### Model ####
model1 <- manova(cbind(f.IIIa_5Me, f.IIIa_6Me, f.IIIb_5Me, f.IIIb_6Me, f.IIIc_5Me, f.IIIc_6Me, f.IIa_5Me, f.IIa_6Me, f.IIb_5Me, f.IIb_6Me, f.IIc_5Me, f.IIc_6Me, f.Ia, f.Ib, f.Ic) ~ Acidity*Aridity*Salinity_classe*Sample.type, data = MArid.mano)
MANOVA.res1 <- summary(model1)
AOV.res1 <- summary.aov(model1)
model2 <- manova(cbind(MBTp5Me, MBTp6Me, IR6Me, IR6_7Me, IRp6_7Me, CBTp, CBT5Me) ~ Acidity*Aridity*Salinity_classe*Sample.type, data = MArid.mano)
MANOVA.res2 <- summary(model2)
AOV.res2 <- summary.aov(model2)
#### Table results ####
Tab.result <- setNames(data.frame(matrix(data = NA, nrow = 24, ncol = Nb.evironmt)), gsub(' ','', row.names(MANOVA.res1$stats)[1:Nb.evironmt]))
Tab.result[1,] <- paste(round(MANOVA.res1$stats[1:Nb.evironmt,3], digits = 1), sapply(MANOVA.res1$stats[1:Nb.evironmt,6], p_value_to_stars), sep = "")
Tab.result[2,] <- paste(round(AOV.res1$` Response f.IIIa_5Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.IIIa_5Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[3,] <- paste(round(AOV.res1$` Response f.IIIa_6Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.IIIa_6Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[4,] <- paste(round(AOV.res1$` Response f.IIIc_5Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.IIIc_5Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[5,] <- paste(round(AOV.res1$` Response f.IIIc_6Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.IIIc_6Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[6,] <- paste(round(AOV.res1$` Response f.IIIb_5Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.IIIb_5Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[7,] <- paste(round(AOV.res1$` Response f.IIIb_6Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.IIIb_6Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[8,] <- paste(round(AOV.res1$` Response f.IIa_5Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.IIa_5Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[9,] <- paste(round(AOV.res1$` Response f.IIa_6Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.IIa_6Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[10,] <- paste(round(AOV.res1$` Response f.IIb_5Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.IIb_5Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[11,] <- paste(round(AOV.res1$` Response f.IIb_6Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.IIb_6Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[12,] <- paste(round(AOV.res1$` Response f.IIc_5Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.IIc_5Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[13,] <- paste(round(AOV.res1$` Response f.IIc_6Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.IIc_6Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[14,] <- paste(round(AOV.res1$` Response f.Ia`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.Ia`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[15,] <- paste(round(AOV.res1$` Response f.Ib`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.Ib`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[16,] <- paste(round(AOV.res1$` Response f.Ic`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res1$` Response f.Ic`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[17,] <- paste(round(MANOVA.res2$stats[1:Nb.evironmt,3], digits = 1), sapply(MANOVA.res2$stats[1:Nb.evironmt,6], p_value_to_stars), sep = "")
Tab.result[18,] <- paste(round(AOV.res2$` Response MBTp5Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res2$` Response MBTp5Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[19,] <- paste(round(AOV.res2$` Response MBTp6Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res2$` Response MBTp6Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[20,] <- paste(round(AOV.res2$` Response IR6Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res2$` Response IR6Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[21,] <- paste(round(AOV.res2$` Response IR6_7Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res2$` Response IR6_7Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[22,] <- paste(round(AOV.res2$` Response IRp6_7Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res2$` Response IRp6_7Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[23,] <- paste(round(AOV.res2$` Response CBTp`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res2$` Response CBTp`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
Tab.result[24,] <- paste(round(AOV.res2$` Response CBT5Me`$`F value`[1:Nb.evironmt], digits = 1), sapply(AOV.res2$` Response CBT5Me`$`Pr(>F)`[1:Nb.evironmt], p_value_to_stars), sep = "")
#### Export table in LateX ####
Tab.result <- cbind(c("\\textbf{Model 1 (FA)}", rep("", 15), "\\textbf{Model 2 (Indices)}", rep("", 7)), List.param, Tab.result)
names(Tab.result) <- Group.names
print(Tab.result)
Save.path.tex <- "Table/Table_3"; library(xtable)
LateX.caption <- "Statistical results of the two MANOVA carried to test (1) the brGDGT FA responses to MAAT, MAF, Salinity, AI and the sample types and (2) the $\\mathrm{MBT'_{5Me}}$, $\\mathrm{MBT'_{6Me}}$ and $\\mathrm{IR'_{6+7Me}}$ response to the same environmental parameters."
Tlatex <- xtable(Tab.result, caption = LateX.caption, type = "latex", label = "Table_MANOVA")
print(Tlatex, file = Save.path.tex, booktabs = T, include.rownames = F, comment = F,
caption.placement = "top", sanitize.text.function = function(x){x},
hline.after = c(-1,0,16,nrow(Tab.result)))
}
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
#### P-values as stars ####
p_value_to_stars <- function(p) {
ifelse(p <= 0.001, "***",
ifelse(p <= 0.01, "** ",
ifelse(p <= 0.05, "*  ",
ifelse(p <= 0.1, "   ", "   "))))}
p_value_to_test <- function(p) {
ifelse(p <= 0.001, "**",
ifelse(p <= 0.01, "*", ""))}
#### Cleaning data and test ####
MArid.mano <- MArid
Nb.evironmt <- 4
MArid.mano <- MArid[complete.cases(MArid[c("Salinity", "pH")]),]
print(paste("Database size for MANOVA:", nrow(MArid.mano)))
List.indices <- c("MBTp5Me", "MBTp6Me", "IR6Me", "IR6_7Me", "IRp6_7Me", "CBTp", "CBT5Me")
List.FA <- c("f.IIIa_5Me", "f.IIIa_6Me", "f.IIIb_5Me", "f.IIIb_6Me", "f.IIIc_5Me", "f.IIIc_6Me", "f.IIa_5Me", "f.IIa_6Me", "f.IIb_5Me", "f.IIb_6Me", "f.IIc_5Me", "f.IIc_6Me", "f.Ia", "f.Ib", "f.Ic")
List.param <- c("\\textbf{F-statistics}", "f(IIIa)", "f(IIIa')", "f(IIIb)", "f(IIIb')", "f(IIIc)", "f(IIIc')", "f(IIa)", "f(IIa')", "f(IIb)", "f(IIb')", "f(IIc)", "f(IIc')", "f(Ia)", "f(Ib)", "f(Ic)", "\\textbf{F-statistics}", "$\\mathrm{MBT'_{5Me}}$", "$\\mathrm{MBT'_{6Me}}$", "$\\mathrm{IR_{6Me}}$", "$\\mathrm{IR_{6+7Me}}$", "$\\mathrm{IR'_{6+7Me}}$", "CBT'", "$\\mathrm{CBT'_{5Me}}$")
Group.names <- c("Model", "Compound", "\\textbf{Alkalinity}", "\\textbf{Aridity}", "\\textbf{Salinity}", "\\textbf{Sample type}")
#### 1. Assumption of Multivariate Normality (using Mardia's test) ####
library(MVN)
result <- mvn(data = MArid.mano[, List.indices], mvnTest = "mardia")
result <- mvn(data = MArid.mano[, List.FA], mvnTest = "mardia")
#### 2. Assumption of Homogeneity of Variance-Covariance (Equality of Covariance Matrices) using Levene test ####
library(car)
apply_levene_test <- function(df, group_var) {
df[[group_var]] <- as.factor(df[[group_var]])
results <- lapply(df[, sapply(df, is.numeric)], function(x) {
levene_result <- leveneTest(x ~ df[[group_var]], data = df)
return(levene_result$`Pr(>F)`[1])  # Extract p-value
})
result_df <- data.frame(
Variable = names(results),
P_Value = unlist(results)
)
return(result_df)
}
levene_results1 <- cbind(Acidity  = apply_levene_test(MArid.mano[, c(List.FA, "Acidity")], "Acidity")[,1:2],
Aridity = apply_levene_test(MArid.mano[, c(List.FA, "Aridity")], "Aridity")[,2],
Salinity_classe = apply_levene_test(MArid.mano[, c(List.FA, "Salinity_classe")], "Salinity_classe")[,2],
Sample.type = apply_levene_test(MArid.mano[, c(List.FA, "Sample.type")], "Sample.type")[,2]
)
levene_results2 <- cbind(Acidity  = apply_levene_test(MArid.mano[, c(List.indices, "Acidity")], "Acidity")[,1:2],
Aridity = apply_levene_test(MArid.mano[, c(List.indices, "Aridity")], "Aridity")[,2],
Salinity_classe = apply_levene_test(MArid.mano[, c(List.indices, "Salinity_classe")], "Salinity_classe")[,2],
Sample.type = apply_levene_test(MArid.mano[, c(List.indices, "Sample.type")], "Sample.type")[,2]
)
levene_pval1 <- sapply(levene_results1, p_value_to_test)
levene_pval2 <- sapply(levene_results2, p_value_to_test)
levene_pval1 <- rbind(levene_pval1, levene_pval2)
row.names(levene_pval1) <- List.param[-c(1,17)]
levene_pval1 <- data.frame(levene_pval1[,-c(1)])
names(levene_pval1) <- Group.names[3:length(Group.names)]
Save.path.tex <- "Table/Table_S5.tex"; library(xtable)
LateX.caption <- "Levene's test results for the two MANOVA models used to evaluate the grouping factors effect accross brGFGT FA and indices. The violation of the assumption of homogeneity of variance-covariance is marked by ** (p-values < 0.001) or * (p-values < 0.01)"
Tlatex <- xtable(levene_pval1, caption = LateX.caption, type = "latex", label = "SI_Table_Lavene")
print(Tlatex, file = Save.path.tex, booktabs = T, include.rownames = T, comment = F,
caption.placement = "top", sanitize.text.function = function(x){x},
hline.after = c(-1,0,15,nrow(levene_pval1)))
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
Meco.LR <- Meco
Meco.LR$Acidity <- gsub(".*_", "", Meco.LR$Acidity)
Meco.LR$Acidity <- factor(Meco.LR$Acidity, c('Acid', 'Neutral', 'Alkalin'))
A <- LR.FA.clim(Msurf.mean["MBTp5Me"], Mclim["MAAT"], Return.plot = T,
Mtype = Meco.LR, RegLig = "Local", # Global / Local
yLim = c(0,1), Facet = T, Compare.all = T, Stat.lm = T, T_test = T, Bootstraps = F,
Ylab = expression(paste(MBT,"'"[5~Me])), Xlab = "MAAT (°C)", Legend.position = "none",
Show.Plotly = F, Add.R2 = T, Select.type = "Acidity", xLim = c(-10,20),
Save.csv = "Results/Coef_lr_MAAT_MBT5ME_acidity.csv",
W = 1000*.9, H = 500*.9, Save.plot = "Figures/Fig_S4.pdf")
#### Fig. S6 (Calibration for Sample type classes) ####
Fig_S6 = T
if(Fig_S6 == T){
C <- LR.FA.clim(Msurf.mean["MBTp5Me"], Mclim["MAAT"], Return.plot = T,
Mtype = Meco, RegLig = "Local", # Global / Local
yLim = c(0,1), Facet = T, Compare.all = T, Stat.lm = T, T_test = T, Bootstraps = F,
Ylab = expression(paste(MBT,"'"[5~Me])), Xlab = "MAAT (°C)", Legend.position = "none",
Show.Plotly = F, Add.R2 = T, Select.type = "Sample.type", xLim = c(-10,20),
Save.csv = "Results/Coef_lr_MAAT_MBT5ME_sample_type.csv",
W = 1000*.9, H = 500*.9, Save.plot = "Figures/Fig_S6.pdf")}
rm(list = ls())
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
rm(list = ls())
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
rm(list = ls())
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
rm(list = ls())
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
B <- LR.FA.clim(Msurf.mean["MBTp5Me"], Mclim["MAAT"], Return.plot = T,
Mtype = Meco, RegLig = "Local", # Global / Local
yLim = c(0,1), Facet = T, Compare.all = T, Stat.lm = T, T_test = T, Bootstraps = F,
Ylab = expression(paste(MBT,"'"[5~Me])), Xlab = "MAAT (°C)", Legend.position = "none",
Show.Plotly = F, Add.R2 = T, Select.type = "Aridity", xLim = c(-10,20),
Save.csv = "Results/Coef_lr_MAAT_MBT5ME_aridity.csv",
W = 1500*.9, H = 600*.9, Save.plot = "Figures/Fig_S5.pdf")}
#### Fig. S5 (Calibration for Aridity classes) ####
if(Fig_S5 == T){
Meco$Aridity <- gsub(".*_", "", Meco$Aridity)
Meco$Aridity <- factor(Meco$Aridity, c('Hyper-arid', 'Arid', 'Semi-arid', 'Dry sub-humid', 'Humid'))
B <- LR.FA.clim(Msurf.mean["MBTp5Me"], Mclim["MAAT"], Return.plot = T,
Mtype = Meco, RegLig = "Local", # Global / Local
yLim = c(0,1), Facet = T, Compare.all = T, Stat.lm = T, T_test = T, Bootstraps = F,
Ylab = expression(paste(MBT,"'"[5~Me])), Xlab = "MAAT (°C)", Legend.position = "none",
Show.Plotly = F, Add.R2 = T, Select.type = "Aridity", xLim = c(-10,20),
Save.csv = "Results/Coef_lr_MAAT_MBT5ME_aridity.csv",
W = 1500*.9, H = 600*.9, Save.plot = "Figures/Fig_S5.pdf")}
#### Fig. S6 (Calibration for Sample type classes) ####
if(Fig_S6 == T){
LR.FA.clim(Msurf.mean["MBTp5Me"], Mclim["MAAT"], Return.plot = T,
Mtype = Meco, RegLig = "Local",
yLim = c(0,1), Facet = T, Compare.all = T, Stat.lm = T, T_test = T, Bootstraps = F,
Ylab = expression(paste(MBT,"'"[5~Me])), Xlab = "MAAT (°C)", Legend.position = "none",
Show.Plotly = F, Add.R2 = T, Select.type = "Sample.type", xLim = c(-10,20),
Save.csv = "Results/Coef_lr_MAAT_MBT5ME_sample_type.csv",
W = 1000*.9, H = 500*.9, Save.plot = "Figures/Fig_S6.pdf")}
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
rlang::last_trace()
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
rlang::last_trace()
rm(list = ls())
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
rlang::last_trace()
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
pca.full <- PCA.soil[[1]] + PCA.soil[[2]] + PCA.soil[[3]] + PCA.lac[[1]] + PCA.lac[[2]] + PCA.lac[[3]] + PCoI.Uz +
RDA.soil[[1]] + RDA.soil[[2]] + RDA.soil[[3]] + RDA.lac[[1]] + RDA.lac[[2]] + RDA.lac[[3]] + PCoI.Uz2 +
PCoI + PCoI.2 + plot_spacer() + plot_spacer() +
plot_layout(design = layout) & theme(plot.margin = unit(c(0,0,0,0),"cm"))
W = 1300; H = 1000; ggsave(filename = "Figures/Fig_5.pdf", pca.full, width = W*0.026458333, height = H*0.026458333, units = "cm")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
rm(list = ls())
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
rlang::last_trace()
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
rm(list = ls())
source("~/Documents/Recherche/R_stats/Project_GitHub/GDGT_ACADB/main.R")
rm(list = ls())
